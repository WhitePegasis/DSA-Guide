					***Address Typecasting***

pointers can't be casted implicitly.



int i=65;
int* p=&i;

char p2=65;
cout<<p; // will print A
char* p3=p; // this will throw an error

char* p3=(char*)p;
cout<<*p3; //will print A
cout<<*(p3+1);  //will print null or endl //since 65 is stored in i this way: [65][null][null][null]
cout<<*(p3+2);  //will print null or endl
cout<<*(p3+3);  //will print null or endl


char ch='A';

char* p1=&ch;
int* p2=(int*)p1; // will not throw an error but since integer is of 4 bytes p2 will read 3 extra bytes after ch.
		// [65][garbage][garbage][garbage]
-------------------------------------------------------------------------------------------------------------

1. Void pointer can point to which type of objects ?
Ans: All type

--------------------------------------------------------------------
2.
int main()
{
        int d = 65;
        int i = d;
        char ch = i;
        cout << ch << endl;
}

Ans: A

-------------------------------------------------------------------
3.
#include <iostream>
using namespace std;

void updateValue(int *p){
    *p = 610 % 255; 
}

int main(){
    char ch = 'A';
    updateValue((int*)&ch);
    cout << ch;
}

Ans: d //610%255= 100 , which is ascii value for 'd'

--------------------------------------------------------------------

				***Reference and Pass by reference***

int i=65;
int &j=i; //j is reference variable , so we can say that j is just another name for i nothing else

->No new memory is allocated for reference variable


int &j;	//will throw an error, we must provide whose reference it is at the time of declaration only
j=i;

We can pass any variable by reference to a function too,
void increment(int& i) {
	i++;
}




// bad practice
int& f(int n) {    //this function returns reference of a location that is no longer there after scope of this function is over.
	int a = n;
	return a;
}

// bad practice
int* f2() {	//this function returns pointer pointing to a location that is no longer there after scope of this function is over.
	int i = 10;
	return &i;
}

------------------------------------------------------------------------------------------------------------------------
1.
#include <iostream>
using namespace std;

void func(int p){
    cout << p << " ";
}

int main(){
    int i = 10;
    int &p = i;
    func(p++);
    cout << i;
}

Ans: 10 11

--------------------------------------

2.
#include <iostream>
using namespace std;

void func(int i, int& j, int p){
    i++;
    j++;
    p++;
}

int main(){
    int i = 10;
    int j = 6;
    int &p = i;
    func(i, j, p);
    cout << i << " " << j << " " << p;
}

Ans: 10 7 10

--------------------------------------------
